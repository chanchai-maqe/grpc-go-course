// Code generated by protoc-gen-go. DO NOT EDIT.
// source: qrcode.proto

package qrcodepb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type QRCode struct {
	// string is type of sub message variable
	BizMchId             string   `protobuf:"bytes,1,opt,name=bizMchId,proto3" json:"bizMchId,omitempty"`
	MchId                string   `protobuf:"bytes,2,opt,name=mchId,proto3" json:"mchId,omitempty"`
	BillerId             string   `protobuf:"bytes,3,opt,name=billerId,proto3" json:"billerId,omitempty"`
	Rsapublickey         string   `protobuf:"bytes,4,opt,name=rsapublickey,proto3" json:"rsapublickey,omitempty"`
	Apikey               string   `protobuf:"bytes,5,opt,name=apikey,proto3" json:"apikey,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QRCode) Reset()         { *m = QRCode{} }
func (m *QRCode) String() string { return proto.CompactTextString(m) }
func (*QRCode) ProtoMessage()    {}
func (*QRCode) Descriptor() ([]byte, []int) {
	return fileDescriptor_qrcode_c099908513890973, []int{0}
}
func (m *QRCode) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QRCode.Unmarshal(m, b)
}
func (m *QRCode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QRCode.Marshal(b, m, deterministic)
}
func (dst *QRCode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QRCode.Merge(dst, src)
}
func (m *QRCode) XXX_Size() int {
	return xxx_messageInfo_QRCode.Size(m)
}
func (m *QRCode) XXX_DiscardUnknown() {
	xxx_messageInfo_QRCode.DiscardUnknown(m)
}

var xxx_messageInfo_QRCode proto.InternalMessageInfo

func (m *QRCode) GetBizMchId() string {
	if m != nil {
		return m.BizMchId
	}
	return ""
}

func (m *QRCode) GetMchId() string {
	if m != nil {
		return m.MchId
	}
	return ""
}

func (m *QRCode) GetBillerId() string {
	if m != nil {
		return m.BillerId
	}
	return ""
}

func (m *QRCode) GetRsapublickey() string {
	if m != nil {
		return m.Rsapublickey
	}
	return ""
}

func (m *QRCode) GetApikey() string {
	if m != nil {
		return m.Apikey
	}
	return ""
}

type QrcodeRequest struct {
	Qrcode               *QRCode  `protobuf:"bytes,1,opt,name=qrcode,proto3" json:"qrcode,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QrcodeRequest) Reset()         { *m = QrcodeRequest{} }
func (m *QrcodeRequest) String() string { return proto.CompactTextString(m) }
func (*QrcodeRequest) ProtoMessage()    {}
func (*QrcodeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_qrcode_c099908513890973, []int{1}
}
func (m *QrcodeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QrcodeRequest.Unmarshal(m, b)
}
func (m *QrcodeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QrcodeRequest.Marshal(b, m, deterministic)
}
func (dst *QrcodeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QrcodeRequest.Merge(dst, src)
}
func (m *QrcodeRequest) XXX_Size() int {
	return xxx_messageInfo_QrcodeRequest.Size(m)
}
func (m *QrcodeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QrcodeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QrcodeRequest proto.InternalMessageInfo

func (m *QrcodeRequest) GetQrcode() *QRCode {
	if m != nil {
		return m.Qrcode
	}
	return nil
}

type QrcodeResponse struct {
	Result               string   `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QrcodeResponse) Reset()         { *m = QrcodeResponse{} }
func (m *QrcodeResponse) String() string { return proto.CompactTextString(m) }
func (*QrcodeResponse) ProtoMessage()    {}
func (*QrcodeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_qrcode_c099908513890973, []int{2}
}
func (m *QrcodeResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QrcodeResponse.Unmarshal(m, b)
}
func (m *QrcodeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QrcodeResponse.Marshal(b, m, deterministic)
}
func (dst *QrcodeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QrcodeResponse.Merge(dst, src)
}
func (m *QrcodeResponse) XXX_Size() int {
	return xxx_messageInfo_QrcodeResponse.Size(m)
}
func (m *QrcodeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QrcodeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QrcodeResponse proto.InternalMessageInfo

func (m *QrcodeResponse) GetResult() string {
	if m != nil {
		return m.Result
	}
	return ""
}

func init() {
	proto.RegisterType((*QRCode)(nil), "qrcodepb.QRCode")
	proto.RegisterType((*QrcodeRequest)(nil), "qrcodepb.qrcodeRequest")
	proto.RegisterType((*QrcodeResponse)(nil), "qrcodepb.qrcodeResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QrcodeServiceClient is the client API for QrcodeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QrcodeServiceClient interface {
	// Unary API
	// Format:
	// input = SomethingRequest
	// return / ouput = SomethingResponse
	Hi(ctx context.Context, in *QrcodeRequest, opts ...grpc.CallOption) (*QrcodeResponse, error)
}

type qrcodeServiceClient struct {
	cc *grpc.ClientConn
}

func NewQrcodeServiceClient(cc *grpc.ClientConn) QrcodeServiceClient {
	return &qrcodeServiceClient{cc}
}

func (c *qrcodeServiceClient) Hi(ctx context.Context, in *QrcodeRequest, opts ...grpc.CallOption) (*QrcodeResponse, error) {
	out := new(QrcodeResponse)
	err := c.cc.Invoke(ctx, "/qrcodepb.qrcodeService/Hi", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QrcodeServiceServer is the server API for QrcodeService service.
type QrcodeServiceServer interface {
	// Unary API
	// Format:
	// input = SomethingRequest
	// return / ouput = SomethingResponse
	Hi(context.Context, *QrcodeRequest) (*QrcodeResponse, error)
}

func RegisterQrcodeServiceServer(s *grpc.Server, srv QrcodeServiceServer) {
	s.RegisterService(&_QrcodeService_serviceDesc, srv)
}

func _QrcodeService_Hi_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QrcodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QrcodeServiceServer).Hi(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qrcodepb.qrcodeService/Hi",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QrcodeServiceServer).Hi(ctx, req.(*QrcodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _QrcodeService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "qrcodepb.qrcodeService",
	HandlerType: (*QrcodeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Hi",
			Handler:    _QrcodeService_Hi_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "qrcode.proto",
}

func init() { proto.RegisterFile("qrcode.proto", fileDescriptor_qrcode_c099908513890973) }

var fileDescriptor_qrcode_c099908513890973 = []byte{
	// 230 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x90, 0xc1, 0x4a, 0x03, 0x31,
	0x10, 0x86, 0xdd, 0x6a, 0x97, 0x3a, 0x56, 0x91, 0x41, 0x74, 0xe9, 0x49, 0x72, 0xda, 0xd3, 0x1e,
	0xea, 0xa9, 0x67, 0x2f, 0x56, 0xf0, 0xe0, 0xfa, 0x04, 0x4d, 0x32, 0x60, 0x30, 0x9a, 0x34, 0xd9,
	0x15, 0xf4, 0x31, 0x7c, 0x62, 0x69, 0x26, 0x51, 0x4a, 0x8f, 0xdf, 0x7c, 0x4c, 0xfe, 0x7f, 0x02,
	0xf3, 0x6d, 0x50, 0x4e, 0x53, 0xe7, 0x83, 0x1b, 0x1c, 0xce, 0x98, 0xbc, 0x14, 0x3f, 0x15, 0xd4,
	0xcf, 0xfd, 0xbd, 0xd3, 0x84, 0x0b, 0x98, 0x49, 0xf3, 0xfd, 0xa4, 0x5e, 0xd7, 0xba, 0xa9, 0x6e,
	0xab, 0xf6, 0xb4, 0xff, 0x63, 0xbc, 0x82, 0xe9, 0x7b, 0x12, 0x93, 0x24, 0x18, 0x78, 0xc3, 0x5a,
	0x0a, 0x6b, 0xdd, 0x1c, 0x97, 0x0d, 0x66, 0x14, 0x30, 0x0f, 0x71, 0xe3, 0x47, 0x69, 0x8d, 0x7a,
	0xa3, 0xaf, 0xe6, 0x24, 0xf9, 0xbd, 0x19, 0x5e, 0x43, 0xbd, 0xf1, 0x66, 0x67, 0xa7, 0xc9, 0x66,
	0x12, 0x2b, 0x38, 0xe7, 0x82, 0x3d, 0x6d, 0x47, 0x8a, 0x03, 0xb6, 0x50, 0xf3, 0x20, 0x15, 0x3b,
	0x5b, 0x5e, 0x76, 0xe5, 0x80, 0x8e, 0xcb, 0xf7, 0xd9, 0x8b, 0x16, 0x2e, 0xca, 0x6a, 0xf4, 0xee,
	0x23, 0xd2, 0x2e, 0x24, 0x50, 0x1c, 0xed, 0x90, 0x8f, 0xca, 0xb4, 0x7c, 0x2c, 0x21, 0x2f, 0x14,
	0x3e, 0x8d, 0x22, 0x5c, 0xc1, 0xe4, 0xc1, 0xe0, 0xcd, 0xff, 0xd3, 0x7b, 0x1d, 0x16, 0xcd, 0xa1,
	0xe0, 0x04, 0x71, 0x24, 0xeb, 0xf4, 0xad, 0x77, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x9e, 0xd8,
	0x9f, 0xfe, 0x66, 0x01, 0x00, 0x00,
}
